install.packages("tidyverse")
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
# Parse x
x <- "2010 September 20th" # 2010-09-20
ymd(x)
install.packages("hrbrthemes")
install.packages("rmdformats")
library(rmdformats)
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(rmdformats)
library(readr)
library(dplyr)
library(ggplot2)
library(lubridate)
library(rmdformats)
as.POSIXct("2010-10-01 12:12:00", tz = "America/Los_Angeles")
x_date <- as.Date(x)
# The date R 3.0.0 was released
x <- "2013-04-03"
# Examine structure of x
str(x)
x_date <- as.Date(x)
str(x_date)
april_10_2014 <- as.Date('2014-04-10')
april_10_2014 <- as.Date('2014-04-10')
april_10_2014
y <- year(this_day)
#lets store in a var called `this_day`
this_day <- today()
this_day
y <- year(this_day)
m <- month(this_day)
d <- day(this_day)
y
m
d
w <- wday(this_day)
m <- mday(this_day)
y <- yday(this_day)
rbind(w,m,y)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hr <- hour(this_moment)
min <- minute(this_moment)
sec <- second(this_moment)
rbind(hr,min,sec)
# Parse z
z <- "Sep, 12th 2010 14:00"  # 2010-09-12T14:00
___(z)
# Parse z
z <- "Sep, 12th 2010 14:00"  # 2010-09-12T14:00
mdy_hm(z)
# Parse z
z <- "Sep, 12th 2010 14:00"  # 2010-09-12T14:00
mdy_hm(z)
a <- "27 May 2019"
dmy(a)
# Specify an order string to parse x
x <- "Monday May 26th 2019 at 1pm"
parse_date_time(x, orders = "amdyIp")
?parse_date_time
# Specify order to include both "mdy" and "dmy"
two_orders <- c("October 7, 2001", "October 13, 2002", "April 13, 2003",
"17 April 2005", "23 April 2017")
parse_date_time(two_orders, orders = c("mdy", "dmy"))
# Specify order to include "dOmY", "OmY" and "Y"
short_dates <- c("11 December 1282", "May 1372", "1253")
parse_date_time(short_dates, orders = c("dOmY", "OmY", "Y"))
# Import CSV with read_csv()
akl_daily_raw <- read_csv("https://assets.datacamp.com/production/course_5348/datasets/akl_weather_daily.csv")
View(akl_daily_raw)
# Print akl_daily_raw
akl_daily_raw
# Plot to check work
ggplot(akl_daily, aes(x = date, y = max_temp)) +
geom_line()
# Parse date
akl_daily <- akl_daily_raw %>%
mutate(date = ymd(date))
# Print akl_daily
akl_daily
# Plot to check work
ggplot(akl_daily, aes(x = date, y = max_temp)) +
geom_line()
# Import "akl_weather_hourly_2016.csv"
akl_hourly_raw <- read_csv("https://assets.datacamp.com/production/course_5348/datasets/akl_weather_hourly_2016.csv")
# Print akl_hourly_raw
akl_hourly_raw
# Plot to check work
ggplot(akl_hourly, aes(x = datetime, y = temperature)) +
geom_line()
# Parse datetime_string
akl_hourly <- akl_hourly  %>%
mutate(
datetime_string = paste(date, time, sep = "T"),
datetime = ymd_hms(datetime_string)
)
# Use make_date() to combine year, month and mday
akl_hourly  <- akl_hourly_raw  %>%
mutate(date = make_date(year = year, month = month, day = mday))
# Parse datetime_string
akl_hourly <- akl_hourly  %>%
mutate(
datetime_string = paste(date, time, sep = "T"),
datetime = ymd_hms(datetime_string)
)
# Print date, time and datetime columns of akl_hourly
akl_hourly %>% select(date, time, datetime)
# Plot to check work
ggplot(akl_hourly, aes(x = datetime, y = temperature)) +
geom_line()
x <- ymd("2013-02-23")
year(x)
x <- ymd("2013-02-23")
year(x)
month(x)
day(x)
x <- ymd("2019-05-27")
year(x)
month(x)
day(x)
print(x)
year(x) <- 2017
x
release_time <- releases$datetime
release_time <- releases$datetime
# Use read_csv() to import rversions.csv
releases <- read_csv("https://assets.datacamp.com/production/course_5348/datasets/rversions.csv")
release_time <- releases$datetime
head(release_time)
head(month(release_time))
release_time %>% month(release_time) %>% table()
month(release_time) %>% table()
month(release_time) %>% table() %>% sort()
month(release_time) %>% table()
year(release_time) %>% table()
hour(release_time)
hour(release_time) < 12
mean(hour(release_time)) < 12
mean(hour(release_time) < 12)
# How often is the release in am?
mean(am(release_time))
# Use wday() to tabulate release by day of the week
wday(releases$datetime) %>% table()
# Create column wday to hold week days
releases$wday <- wday(releases$datetime, label = TRUE)
# Add label = TRUE to make table more readable
wday(releases$datetime, label = TRUE) %>% table()
# Create column wday to hold week days
releases$wday <- wday(releases$datetime, label = TRUE)
# Plot barchart of weekday by type of release
ggplot(releases, aes(wday)) +
geom_bar() +
facet_wrap(~ type, ncol = 1, scale = "free_y")
library(ggridges)
install.packages("ggridges")
#install.packages("ggridges")
library(ggridges)
# Add columns for year, yday and month
akl_daily <- akl_daily %>%
mutate(
year = year(date),
yday = yday(date),
month = month(date, label = TRUE))
# Plot max_temp by yday for all years
ggplot(akl_daily, aes(x = yday, y = max_temp)) +
geom_line(aes(group = year), alpha = 0.5)
# Examine distribtion of max_temp by month
ggplot(akl_daily, aes(x = max_temp, y = month, height = ..density..)) +
geom_density_ridges(stat = "density")
?ggridges
?any
# Create new columns hour, month and rainy
akl_hourly <- akl_hourly %>%
mutate(
hour = hour(datetime),
month = month(datetime, label = TRUE),
rainy = weather == "Precipitation"
)
# Filter for hours between 8am and 10pm (inclusive)
akl_day <- akl_hourly %>%
filter(hour >= 8, hour <= 22)
# Summarise for each date if there is any rain
rainy_days <- akl_day %>%
group_by(month, date) %>%
summarise(
any_rain = any(rainy)
)
View(rainy_days)
# Summarise for each month, the number of days with rain
rainy_days %>%
summarise(
days_rainy = sum(any_rain)
)
r_3_4_1 <- ymd_hms("2016-05-03 07:13:28 UTC")
# Round down to day
floor_date(r_3_4_1, unit = "day")
# Round to nearest 5 minutes
round_date(r_3_4_1, unit = "5 minutes")
# Round up to week
ceiling_date(r_3_4_1, unit = "week")
# Subtract r_3_4_1 rounded down to day
r_3_4_1 - floor_date(r_3_4_1, unit = "day")
# Create day_hour, datetime rounded down to hour
akl_hourly <- akl_hourly %>%
mutate(
day_hour = floor_date(datetime, unit = "hour")
)
# Count observations per hour
akl_hourly %>%
count(day_hour)
# Find day_hours with n != 2
akl_hourly %>%
count(day_hour) %>%
filter(n != 2) %>%
arrange(desc(n))
help(package = lubridate)
?parse_date_time
?table
#install.packages("ggridges")
library(ggridges)
# Add columns for year, yday and month
akl_daily <- akl_daily %>%
mutate(
year = year(date),
yday = yday(date),
month = month(date, label = TRUE))
akl_daily
# Plot max_temp by yday for all years
ggplot(akl_daily, aes(x = yday, y = max_temp)) +
geom_line(aes(group = year), alpha = 0.5)
# Plot max_temp by yday for all years
ggplot(akl_daily, aes(x = yday, y = max_temp)) +
geom_line(aes(group = year), alpha = 0.5, color = year)
# Plot max_temp by yday for all years
ggplot(akl_daily, aes(x = yday, y = max_temp)) +
geom_line(aes(group = year, color = year), alpha = 0.5)
# Plot max_temp by yday for all years
ggplot(akl_daily, aes(x = yday, y = max_temp)) +
geom_line(aes(group = year, color = factor(year)), alpha = 0.5)
ggplot(akl_daily, aes(x = yday, y = max_temp)) +
geom_line(aes(group = year), alpha = 0.5)
ggplot(akl_daily, aes(x = yday, y = max_temp)) +
geom_line(aes(group = year), alpha = 0.5)
